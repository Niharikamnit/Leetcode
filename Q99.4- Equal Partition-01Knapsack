https://practice.geeksforgeeks.org/problems/subset-sum-problem2014/1


Same as Subset sum, but here find if a subset exists for half of the sum(sum of total elements). then the other half will also exist

Recursive-

     bool isSubsetSum(int N, int arr[], int sum){
        // code here 
        if(N==0) return false;
        if(sum==0) return true;
        
        if(arr[N-1]<=sum) return isSubsetSum(N-1,arr,sum-arr[N-1])
                                  ||isSubsetSum(N-1,arr,sum);
        else if(arr[N-1]>sum) return isSubsetSum(N-1,arr,sum);                         
        
    }
    
    int equalPartition(int N, int arr[])
    {
        // code here
        int sum=0;
        for(int i=0;i<N;i++) sum+=arr[i];
        
        if(sum%2!=0) return 0;
        
        int S=sum/2;
        return isSubsetSum(N,arr,S);
    }
    
    
    
Top down--

    int isSubsetSum(int N, int arr[], int sum){
         bool dp[N+1][sum+1];
         memset(dp,false,sizeof(dp));
         for (int i = 0; i <= N; i++)
         dp[i][0] = true;
 
         for (int i = 1; i <= sum; i++)
         dp[0][i] = false;
         
         for(int i=1;i<=N;i++) {
             for(int j=1;j<=sum;j++) {
                 
                     if(arr[i-1]<=j)
                     dp[i][j]=dp[i-1][j]||dp[i-1][j-arr[i-1]];
                     
                     else dp[i][j]=dp[i-1][j];
             }
         }
         return dp[N][sum];
     }
     
    int equalPartition(int N, int arr[])
    {
        // code here
        int sum=0;
        for(int i=0;i<N;i++) sum+=arr[i];
        
        if(sum%2!=0) return 0;
        
        int S=sum/2;
        return isSubsetSum(N,arr,S);
    }
