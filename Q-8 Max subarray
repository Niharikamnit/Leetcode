https://leetcode.com/problems/maximum-subarray/submissions/


Kadane's 

    int maxSubArray(vector<int>& nums) {
        int mini=INT_MAX;
        for(int i=0;i<nums.size();i++) mini=min(mini,nums[i]);
       int curr_sum=0, maxSum=mini;
        for(int i=0;i<nums.size();i++) {
            curr_sum+=nums[i];
            
            maxSum=max(maxSum,curr_sum);
            if(curr_sum<0) curr_sum=0;
        }
        return maxSum;
    }
    
OR dp

OR DAC---

Split array into all possiblesubarrays using Maxsubarraysum function which splits it by midpoints (l+h)/2.
then find sum of max(left,right,left+right) sub arrays using maxcrossingsum

int maxCrossingSum(int arr[], int l, int m, int h)
{
    // Include elements on left of mid.
    int sum = 0;
    int left_sum = INT_MIN;
    for (int i = m; i >= l; i--) {
        sum = sum + arr[i];
        if (sum > left_sum)
            left_sum = sum;
    }
 
    // Include elements on right of mid
    sum = 0;
    int right_sum = INT_MIN;
    for (int i = m + 1; i <= h; i++) {
        sum = sum + arr[i];
        if (sum > right_sum)
            right_sum = sum;
    }
 
    // Return sum of elements on left and right of mid
    // returning only left_sum + right_sum will fail for
    // [-2, 1]
    return max(left_sum + right_sum, left_sum, right_sum);
}
 
// Returns sum of maximum sum subarray in aa[l..h]
int maxSubArraySum(int arr[], int l, int h)
{
    // Base Case: Only one element
    if (l == h)
        return arr[l];
 
    // Find middle point
    int m = (l + h) / 2;
 
    /* Return maximum of following three possible cases
            a) Maximum subarray sum in left half
            b) Maximum subarray sum in right half
            c) Maximum subarray sum such that the subarray
       crosses the midpoint */
    return max(maxSubArraySum(arr, l, m),
               maxSubArraySum(arr, m + 1, h),
               maxCrossingSum(arr, l, m, h));
}
