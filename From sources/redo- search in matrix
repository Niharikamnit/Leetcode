https://leetcode.com/problems/search-a-2d-matrix/submissions/



mine -

 bool searchMatrix(vector<vector<int>>& matrix, int target) {    
    int n=matrix.size();
    int m=matrix[0].size();
    int row=-1;
    for(int i=0;i<n;i++){
        if(target<matrix[i][m-1]){
            row=i;
            break;
        }
        else if(target==matrix[i][m-1]) return true;
    }
    if(row==-1) return false;
    else {
        int l=0,h=m,mid;
        while(l<=h){
            mid=l + (h-l)/2;
            if(matrix[row][mid]==target) return true;
            else if(matrix[row][mid]<target) l=mid+1;
            else h=mid-1;
        }
        return false;
    }



perfect O(logN)

 bool searchMatrix(vector<vector<int>> &m, int t) {
        // pointless edge case we still have to consider
		if (!m.size() || !m[0].size()) return false;
        // support variables
		int row, l = 0, r = m.size() - 1, mid;
        while (l < r) {
            mid = (l + r) / 2;
            // moving l up if needed
            if (m[mid].back() < t) l = mid + 1;
            // moving r down if needed
            else if (m[mid][0] > t) r = mid - 1;
            // we found our row!
            else {
                l = mid;
                break;
            };
        }
        // storing the value of the new found row
        row = l;
        // resetting l and r to run a binary search on the rows
        l = 0;
        r = m[0].size() - 1;
        while (l <= r) {
            mid = (l + r) / 2;
            // moving l up if needed
            if (m[row][mid] < t) l = mid + 1;
            // moving r down if needed
            else if (m[row][mid] > t) r = mid - 1;
            // we found our value!
            else return true;
        }
        return false;
    }
