https://leetcode.com/problems/number-of-islands/submissions/





 bool isSafe(int i, int j, vector<vector<char>> &grid, vector<vector<bool>> &visited) {
        if(i>=grid.size()||i<0||j>=grid[0].size()||j<0||grid[i][j]=='0'||visited[i][j]==true){
            return false;
        }
        return true;
    }
    void DFSUtil(vector<vector<char>> &grid, vector<vector<bool>> &visited,int i, int j) {
        visited[i][j]=true;
        
        if(isSafe(i+1,j,grid,visited)){
            DFSUtil(grid,visited,i+1,j);
        }
         if(isSafe(i-1,j,grid,visited)){
            DFSUtil(grid,visited,i-1,j);
        }
         if(isSafe(i,j+1,grid,visited)){
            DFSUtil(grid,visited, i,j+1);
        }
         if(isSafe(i,j-1,grid,visited)){
            DFSUtil(grid,visited,i,j-1);
        }
        
    }    

    class Solution{
    public:
    //Function to find the number of islands.
       
    int numIslands(vector<vector<char>>& grid) {
        int rows=grid.size();
        int cols=grid[0].size();
        vector< vector< bool > > visited( rows, vector<bool>( cols, false ) );
        int count=0;
        for(int i=0;i<grid.size();i++) {
            for(int j=0;j<grid[i].size();j++) {
                if(visited[i][j]==false&&grid[i][j]=='1') {
                    DFSUtil(grid,visited,i,j);
                    count++;
                }
             }
        }
        
        return count;
                
    }

};



max area of all islands

https://leetcode.com/problems/max-area-of-island/submissions/


 bool isSafe(int i, int j, vector<vector<int>> &grid, vector<vector<bool>> &visited) {
        if(i>=grid.size()||i<0||j>=grid[0].size()||j<0||grid[i][j]==0||visited[i][j]==true){
            return false;
        }
        return true;
    }
    int DFSUtil(vector<vector<int>> &grid, vector<vector<bool>> &visited,int i, int j) {
        visited[i][j]=true;
        int a=0,b=0,c=0,d=0;
        if(isSafe(i+1,j,grid,visited)){
            a=DFSUtil(grid,visited,i+1,j);
            
        }
         if(isSafe(i-1,j,grid,visited)){
            b=DFSUtil(grid,visited,i-1,j);
        }
         if(isSafe(i,j+1,grid,visited)){
            c=DFSUtil(grid,visited, i,j+1);
        }
         if(isSafe(i,j-1,grid,visited)){
            d=DFSUtil(grid,visited,i,j-1);
        }
        return 1+ a+b+c+d;
        
    }    
    //Function to find the number of islands.
       
    int numIslands(vector<vector<int>>& grid) {
        int rows=grid.size();
        int cols=grid[0].size();
        int maxi=0;
        vector< vector< bool > > visited( rows, vector<bool>( cols, false ) );
        int count=0;
        for(int i=0;i<grid.size();i++) {
            for(int j=0;j<grid[i].size();j++) {
                if(visited[i][j]==false&&grid[i][j]==1) {
                    int area=0;
                    area=DFSUtil(grid,visited,i,j);
                    count++;
                    maxi=max(maxi,area);
                    area=0;
                }
             }
        }
        
        return maxi;
                
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        return numIslands(grid);
    }
    
    
    
    
    
    
    https://leetcode.com/problems/number-of-closed-islands/discuss/425150/JavaC%2B%2B-with-picture-Number-of-Enclaves
    
    
    // first fill all the corner elements(0s or lands) with water. they wont be part of closed component
    //First, we need to remove all land connected to the edges using flood fill.
       
    int fill(vector<vector<int>>& grid, int i, int j) {
    if (i < 0 || j < 0 || i >= grid.size() || j >= grid[i].size() || grid[i][j])
        return 0;
    return (grid[i][j] = 1) + fill(grid, i + 1, j) + fill(grid, i, j + 1) 
        + fill(grid, i - 1, j) + fill(grid, i, j - 1);
}
    
 bool isSafe(int i, int j, vector<vector<int>> &grid, vector<vector<bool>> &visited) {
        if(i>=grid.size()||i<0||j>=grid[0].size()||j<0||grid[i][j]==1||visited[i][j]==true||i==grid.size()-1||i==0||j==grid[0].size()-1||j==0){
            return false;
        }
        return true;
    }
    void DFSUtil(vector<vector<int>> &grid, vector<vector<bool>> &visited,int i, int j) {
        visited[i][j]=true;
        
        if(isSafe(i+1,j,grid,visited)){
            DFSUtil(grid,visited,i+1,j);
        }
         if(isSafe(i-1,j,grid,visited)){
            DFSUtil(grid,visited,i-1,j);
        }
         if(isSafe(i,j+1,grid,visited)){
            DFSUtil(grid,visited, i,j+1);
        }
         if(isSafe(i,j-1,grid,visited)){
            DFSUtil(grid,visited,i,j-1);
        }
        
    }    

    //Function to find the number of islands.
       
    int numIslands(vector<vector<int>>& grid) {
        int rows=grid.size();
        int cols=grid[0].size();
        vector< vector< bool > > visited( rows, vector<bool>( cols, false ) );
        int count=0;
        for(int i=0; i<rows; i++)
            fill(grid,i,0), fill(grid,i,cols-1);
        for(int j=0; j<cols; j++)
            fill(grid,0,j), fill(grid,rows-1,j);
        for(int i=0;i<grid.size()-1;i++) {
            for(int j=0;j<grid[i].size()-1;j++) {
                if(visited[i][j]==false&&grid[i][j]==0) {
                    DFSUtil(grid,visited,i,j);
                    count++;
                }
             }
        }
        
        return count;
                
    }

    int closedIsland(vector<vector<int>>& grid) {
        return numIslands(grid);
    }
    
    
    
    
    no.of sub islands in grid 2
    
    
    https://leetcode.com/problems/count-sub-islands/submissions/
    
        void dfs(int i,int j,vector<vector<int>>& grid1,vector<vector<int>>& grid2,int &flag,vector<vector<bool>> &vis){
        
        if(i<0 || j<0 || i>=grid2.size() || j>=grid2[0].size() || grid2[i][j]==0||vis[i][j]){
            return;
        }
        
        if(grid1[i][j]!=grid2[i][j]){
            flag = 0;
        } 
        
        vis[i][j] = true;
        
        dfs(i-1,j,grid1,grid2,flag,vis);
        dfs(i,j-1,grid1,grid2,flag,vis);
        dfs(i+1,j,grid1,grid2,flag,vis);
        dfs(i,j+1,grid1,grid2,flag,vis);
        
    }
    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
        
        int ans=0;
        int n=grid1.size();
        int m=grid1[0].size();
        vector<vector<bool>> vis(n,vector<bool>(m,false));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                
                if(grid2[i][j]==1&&vis[i][j]==false){
                    
                    int flag=1;
                    dfs(i,j,grid1,grid2,flag,vis);
                    if(flag){
                       ans+=1;
                    }
                    
                }
            }
        }
        
        return ans;
    }
