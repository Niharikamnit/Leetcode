https://leetcode.com/problems/maximal-square/submissions/

 int maximalSquare(vector<vector<char>>& matrix) {
        int m=matrix.size();
        int n=matrix[0].size();
        int dp[m][n];
        int maxi=INT_MIN;
        bool flag=false;
        memset(dp,0,sizeof(dp));
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(matrix[i][j]=='1'&&i&&j){
                    dp[i][j]=1+min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]));
                    flag=true;
                }
                else dp[i][j]=matrix[i][j]-'0';
                maxi=max(maxi,dp[i][j]);
            }
        }
        if(flag&&maxi==0) return 1;
        return (maxi)*(maxi);
    }
    
    
    count squares
    
    https://leetcode.com/problems/count-square-submatrices-with-all-ones/submissions/
    
     int countSquares(vector<vector<int>>& matrix) {
        // basically , first use dp to find number of square matrices in grid. 
        //dont fill dp table with no.of 1s or ans so far
        int m=matrix.size();
        int n=matrix[0].size();
        int dp[m][n];
        memset(dp,0,sizeof(dp));
        int ans=0;
        //dp[m][n] stores the maximum size of square matrix until m*n
        //values in dp[m][n] is the number of square matrices presnt
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(matrix[i][j]&&i&&j) 
                    dp[i][j]=1+min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]));
                else dp[i][j]=matrix[i][j];
                ans+=dp[i][j];
            }
        }
        return ans;
    }
    
    
    https://leetcode.com/problems/minimum-path-sum/submissions/
    
    
     int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        int dp[m][n];
        memset(dp,0,sizeof(dp));
        dp[0][0]=grid[0][0];
         for(int i=0;i<m;i++){
            for(int j=0;j<n;j++) {
                if(i&&j)
                dp[i][j]=grid[i][j]+min(dp[i-1][j],dp[i][j-1]);
                
                else if(j)
                    dp[i][j]=dp[i][j-1]+grid[i][j];
                else if(i)
                    dp[i][j]=dp[i-1][j]+grid[i][j];
                
            }
        }
        return dp[m-1][n-1];
        // for(int i=m-1;i>=0;i--){
        //     for(int j=n-1;j>=0;j--) {
        //         grid
        //     }
        // }
    }
    
    
    slly check out pyramid and two pyriamid probs
