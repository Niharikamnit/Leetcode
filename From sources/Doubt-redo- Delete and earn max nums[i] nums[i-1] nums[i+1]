https://leetcode.com/problems/delete-and-earn/

//similar to house robbing problem

 int deleteAndEarn(vector<int>& nums) {
        int dp[10001]={0};
        int prof[10001]={0};
        int maxi=INT_MIN;
        for(int i=0;i<nums.size();i++) {
            prof[nums[i]]+=nums[i];
            maxi=max(maxi,nums[i]);
        }
        // int n=10001; orrr
        //more optimised
        int n=maxi+1;
        //we are taking until max or 10001 becuz, we need the max dp out of i, i-1 and i+1, which is irrelevant to the array, except the number of times the number appears.               //instead of sorting, this is better way.

        dp[0]=prof[0];
        dp[1]=prof[1];
        for(int i=2;i<n;i++) {
            dp[i]=max(dp[i-2]+prof[i],dp[i-1]);
        }
        return dp[n-1];
    }
    
    
    orrrr
    
    
    If we sort all the numbers into buckets indexed by these numbers, this is essentially asking you to repetitively take an bucket while giving up the 2 buckets next to it. (the range of these numbers is [1, 10000])

The optimal final result can be derived by keep updating 2 variables skip_i, take_i, which stands for:
skip_i : the best result for sub-problem of first (i+1) buckets from 0 to i, while you skip the ith bucket.
take_i : the best result for sub-problem of first (i+1) buckets from 0 to i, while you take the ith bucket.

DP formula:
take[i] = skip[i-1] + values[i];
skip[i] = Math.max(skip[i-1], take[i-1]);
take[i] can only be derived from: if you skipped the [i-1]th bucket, and you take bucket[i].
skip[i] through, can be derived from either take[i-1] or skip[i-1], whatever the bigger;

/**
 * for numbers from [1 - 10000], each has a total sum sums[i]; if you earn sums[i], you cannot earn sums[i-1] and sums[i+1]
 * kind of like house robbing. you cannot rob 2 connected houses.
 * 
    
    class Solution {
public:
    int deleteAndEarn(vector<int>& nums) {
        int n = 10001;
        vector<int> values(n, 0);
        for (int num : nums)
            values[num] += num;

        int take = 0, skip = 0;
        for (int i = 0; i < n; i++) {
            int takei = skip + values[i];
            int skipi = max(skip, take);
            take = takei;
            skip = skipi;
        }
        return max(take, skip);
    }
};
