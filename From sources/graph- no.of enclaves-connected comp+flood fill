https://leetcode.com/problems/number-of-enclaves/submissions/


//flood fill all the connected componeents to the boundary

class Solution {
public:
    
    int fill(vector<vector<int>> &grid, int i, int j) {
        if(i<0||j<0||i>=grid.size()||j>=grid[0].size()||grid[i][j]==0) return 0;
        
        return (grid[i][j]=0)+fill(grid,i+1,j)+fill(grid,i-1,j)+fill(grid,i,j+1)+fill(grid,i,j-1);
            
    }
    
     bool isSafe(int i, int j, vector<vector<int>> &grid, vector<vector<bool>> &visited) {
        if(i>=grid.size()||i<0||j>=grid[0].size()||j<0||grid[i][j]==0||visited[i][j]==true){
            return false;
        }
        return true;
    }
    void DFSUtil(vector<vector<int>> &grid, vector<vector<bool>> &visited,int i, int j,int &area) {
        visited[i][j]=true;
        area++;
        if(isSafe(i+1,j,grid,visited)){
            DFSUtil(grid,visited,i+1,j,area);
        }
         if(isSafe(i-1,j,grid,visited)){
            DFSUtil(grid,visited,i-1,j,area);
        }
         if(isSafe(i,j+1,grid,visited)){
            DFSUtil(grid,visited, i,j+1,area);
        }
         if(isSafe(i,j-1,grid,visited)){
            DFSUtil(grid,visited,i,j-1,area);
        }
        
    }
    //Function to find the number of islands.
       
    int numIslands(vector<vector<int>>& grid) {
        int rows=grid.size();
        int cols=grid[0].size();
        vector< vector< bool > > visited( rows, vector<bool>( cols, false ) );
        int count=0;
        for(int i=0;i<grid.size();i++) {
            for(int j=0;j<grid[i].size();j++) {
                if(visited[i][j]==false&&grid[i][j]==1) {
                    int area=0;
                    DFSUtil(grid,visited,i,j,area);
                    count+=area;
                }
             }
        }
        
        return count;      
    }
    int numEnclaves(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        for(int i=0;i<n;i++) {
            fill(grid,i,0);
            fill(grid,i,m-1);
        }
        for(int j=0;j<m;j++) {
            fill(grid,0,j);
            fill(grid,n-1,j);
        }
        return numIslands(grid);
    }
};
