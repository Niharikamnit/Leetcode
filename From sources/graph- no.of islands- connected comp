https://leetcode.com/problems/number-of-islands/submissions/





 bool isSafe(int i, int j, vector<vector<char>> &grid, vector<vector<bool>> &visited) {
        if(i>=grid.size()||i<0||j>=grid[0].size()||j<0||grid[i][j]=='0'||visited[i][j]==true){
            return false;
        }
        return true;
    }
    void DFSUtil(vector<vector<char>> &grid, vector<vector<bool>> &visited,int i, int j) {
        visited[i][j]=true;
        
        if(isSafe(i+1,j,grid,visited)){
            DFSUtil(grid,visited,i+1,j);
        }
         if(isSafe(i-1,j,grid,visited)){
            DFSUtil(grid,visited,i-1,j);
        }
         if(isSafe(i,j+1,grid,visited)){
            DFSUtil(grid,visited, i,j+1);
        }
         if(isSafe(i,j-1,grid,visited)){
            DFSUtil(grid,visited,i,j-1);
        }
        
    }    

    class Solution{
    public:
    //Function to find the number of islands.
       
    int numIslands(vector<vector<char>>& grid) {
        int rows=grid.size();
        int cols=grid[0].size();
        vector< vector< bool > > visited( rows, vector<bool>( cols, false ) );
        int count=0;
        for(int i=0;i<grid.size();i++) {
            for(int j=0;j<grid[i].size();j++) {
                if(visited[i][j]==false&&grid[i][j]=='1') {
                    DFSUtil(grid,visited,i,j);
                    count++;
                }
             }
        }
        
        return count;
                
    }

};



max area of all islands

https://leetcode.com/problems/max-area-of-island/submissions/


 bool isSafe(int i, int j, vector<vector<int>> &grid, vector<vector<bool>> &visited) {
        if(i>=grid.size()||i<0||j>=grid[0].size()||j<0||grid[i][j]==0||visited[i][j]==true){
            return false;
        }
        return true;
    }
    int DFSUtil(vector<vector<int>> &grid, vector<vector<bool>> &visited,int i, int j) {
        visited[i][j]=true;
        int a=0,b=0,c=0,d=0;
        if(isSafe(i+1,j,grid,visited)){
            a=DFSUtil(grid,visited,i+1,j);
            
        }
         if(isSafe(i-1,j,grid,visited)){
            b=DFSUtil(grid,visited,i-1,j);
        }
         if(isSafe(i,j+1,grid,visited)){
            c=DFSUtil(grid,visited, i,j+1);
        }
         if(isSafe(i,j-1,grid,visited)){
            d=DFSUtil(grid,visited,i,j-1);
        }
        return 1+ a+b+c+d;
        
    }    
    //Function to find the number of islands.
       
    int numIslands(vector<vector<int>>& grid) {
        int rows=grid.size();
        int cols=grid[0].size();
        int maxi=0;
        vector< vector< bool > > visited( rows, vector<bool>( cols, false ) );
        int count=0;
        for(int i=0;i<grid.size();i++) {
            for(int j=0;j<grid[i].size();j++) {
                if(visited[i][j]==false&&grid[i][j]==1) {
                    int area=0;
                    area=DFSUtil(grid,visited,i,j);
                    count++;
                    maxi=max(maxi,area);
                    area=0;
                }
             }
        }
        
        return maxi;
                
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        return numIslands(grid);
    }
