https://leetcode.com/problems/decode-ways/submissions/

tried recursion---

 int numDecodings(string s) {
        int ans=0;
        ans = recur(s,0);
        return ans;
    }
    int recur(string s, int pos){
        if(pos==s.size())return 1;
        if(s[pos]=='0')return 0;
        if(pos==s.size()-1)return 1;
        string b = s.substr(pos,2);
        
        int way1 = recur(s,pos+1);
        int way2=0;
        if(stoi(b)<=26&&stoi(b)>0){
            way2 = recur(s,pos+2);
        }
        return way1+way2;
    }
    
    
    
       // recursive+memoization

    int recur(string s, int pos, int dp[]){
        if(pos==s.size())return 1;
        if(s[pos]=='0')return 0;
        if(pos==s.size()-1)return 1;
        if(dp[pos]>=0) return dp[pos];
        string b = s.substr(pos,2);
        
        int way1 = recur(s,pos+1,dp);
        int way2=0;
        if(stoi(b)<=26&&stoi(b)>0){
            way2 = recur(s,pos+2,dp);
        }
        dp[pos]=way1+way2;
        return dp[pos];
    }
        int numDecodings(string s) {
        int ans=0;
        int dp[s.length()+1];
        memset(dp,-1,sizeof(dp));
        ans = recur(s,0,dp);
        return ans;
    }
    
    dp
    
        int numDecodings(string s) {
        vector<int> dp(s.size()+1);
        dp[0]=1;
        if(s[0]=='0')dp[1]=0;
        else dp[1]=1;
        for(int i=2;i<=s.size();i++){
            int way1,way2;
            if(s[i-1]=='0')way1=0;
            else way1=dp[i-1];
            if(stoi(s.substr(i-2,2))<=26&&stoi(s.substr(i-2,2))>0&&s[i-2]!='0')way2=dp[i-2];
            else way2=0;
            dp[i]=way1+way2;
        }
        return dp[s.size()];
    }
