https://practice.geeksforgeeks.org/problems/subset-sum-problem-1611555638/1/
We either select the element or we dont. maxof these two outputs store in dp. but if elements value bigger than sum reqd then we dont select

recursive--

    
    bool isSubsetSum(int N, int arr[], int sum){
        // code here 
        if(N==0) return false;
        if(sum==0) return true;
        
        if(arr[N-1]<=sum) return isSubsetSum(N-1,arr,sum-arr[N-1])
                                  ||isSubsetSum(N-1,arr,sum);
        else if(arr[N-1]>sum) return isSubsetSum(N-1,arr,sum);                         
        
    }
    
    
Recursive soln's base cond will be dp's initialisation steps
    
Top down--

int isSubsetSum(int N, int arr[], int sum){
         bool dp[N+1][sum+1];
         memset(dp,false,sizeof(dp));
         for (int i = 0; i <= N; i++)
         dp[i][0] = true;
 
         for (int i = 1; i <= sum; i++)
         dp[0][i] = false;
         
         for(int i=1;i<=N;i++) {
             for(int j=1;j<=sum;j++) {
                 
                     if(arr[i-1]<=j)
                     dp[i][j]=dp[i-1][j]||dp[i-1][j-arr[i-1]];
                     
                     else dp[i][j]=dp[i-1][j];
             }
         }
         return dp[N][sum];
     }
